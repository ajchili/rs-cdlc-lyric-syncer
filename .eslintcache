[{"/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/App.js":"1","/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/index.js":"2","/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/components/Header.js":"3","/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/components/AudioSourceSelector.js":"4","/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/components/Player.js":"5"},{"size":797,"mtime":1608491656169,"results":"6","hashOfConfig":"7"},{"size":197,"mtime":1608353813853,"results":"8","hashOfConfig":"7"},{"size":292,"mtime":1608359376786,"results":"9","hashOfConfig":"7"},{"size":909,"mtime":1608487765626,"results":"10","hashOfConfig":"7"},{"size":12009,"mtime":1608925029699,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c28ys",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/App.js",[],"/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/index.js",[],"/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/components/Header.js",["25"],"import React, { Component } from 'react';\n\nexport default class extends Component {\n  render() {\n    return (\n      <div className=\"uk-margin-top\">\n        <h1 className=\"uk-heading-line uk-text-center\">\n          <span>Better UltraStar Creator</span>\n        </h1>\n      </div>\n    );\n  }\n}\n","/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/components/AudioSourceSelector.js",["26"],"import React, { Component } from 'react';\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.audioInput = React.createRef();\n  }\n\n  audioInputValueChanged = () => {\n    const { setMedia } = this.props;\n    if (setMedia) {\n      const file = this.audioInput.current.files[0];\n      const url = URL.createObjectURL(file);\n      setMedia(file.name, file.type, url);\n    }\n  };\n\n  selectAudioSource = () => {\n    this.audioInput.current.click();\n  };\n\n  render() {\n    return (\n      <div>\n        <button\n          className=\"uk-button uk-button-default uk-button-small\"\n          onClick={this.selectAudioSource}\n        >\n          Select Audio Source\n        </button>\n        <input\n          type=\"file\"\n          accept=\"audio/*\"\n          ref={this.audioInput}\n          onChange={this.audioInputValueChanged}\n          hidden\n        />\n      </div>\n    );\n  }\n}\n","/Users/kirinpatel/github/rs-cdlc-lyric-syncer/src/components/Player.js",["27"],"import React, { Component } from 'react';\nimport Peaks from 'peaks.js';\n\n// Workaround for AudioContext.\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      instance: null,\n      currentLyric: null,\n    };\n    this.audio = React.createRef();\n  }\n\n  componentDidMount() {\n    this.initializePeaks();\n    this.addEventListeners();\n  }\n\n  initializePeaks = () => {\n    const { media } = this.props;\n    this.setState({ instance: null });\n    this.audio.current.setAttribute('src', media.url);\n    this.audio.current.setAttribute('type', media.type);\n    this.audio.current.load();\n    const audioContext = new AudioContext();\n    const options = {\n      containers: {\n        overview: document.getElementById('overview-container'),\n        zoomview: document.getElementById('zoomview-container'),\n      },\n      emitCueEvents: true,\n      mediaElement: this.audio.current,\n      webAudio: {\n        audioContext: audioContext,\n        scale: 64,\n        multiChannel: true,\n      },\n      keyboard: true,\n      showPlayheadTime: true,\n      zoomLevels: [64, 128, 256, 512, 1024, 2048, 4096, 8192],\n    };\n    Peaks.init(options, (err, instance) => {\n      this.setState({ instance });\n      if (err) {\n        console.error(err.message);\n        return;\n      }\n\n      console.log('Peak instance initialized.');\n\n      instance.on('points.enter', (point) => {\n        const isLyric = point.color === '#666';\n        this.setState({ currentLyric: isLyric ? point.labelText : null });\n      });\n\n      instance.on('points.dblclick', this.editLyric);\n\n      document.querySelector(\n        'button[data-action=\"toggle-paused\"]'\n      ).onclick = this.togglePaused;\n\n      document.querySelector(\n        'button[data-action=\"zoom-in\"]'\n      ).onclick = this.zoomIn;\n\n      document.querySelector(\n        'button[data-action=\"zoom-out\"]'\n      ).onclick = this.zoomOut;\n\n      document.querySelector(\n        'button[data-action=\"add-lyric\"]'\n      ).onclick = this.addLyric;\n\n      document.querySelector(\n        'button[data-action=\"end-lyric\"]'\n      ).onclick = this.addEndOfLyric;\n\n      document.querySelector(\n        'button[data-action=\"end-verse\"]'\n      ).onclick = this.addEndOfVerse;\n\n      document.querySelector(\n        'input[data-action=\"change-volume\"]'\n      ).onchange = this.changeVolume;\n    });\n  };\n\n  addEventListeners = () => {\n    document.onkeydown = this.handleKeyDown;\n  };\n\n  download = (name, artist, fileData) => {\n    const fileName = `${artist} - ${name} lyrics.txt`;\n    const blob = new Blob([fileData], { type: 'data:text/plain;' });\n    const url = URL.createObjectURL(blob);\n    const element = document.createElement('a');\n    element.setAttribute('href', url);\n    element.setAttribute('download', fileName);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n\n  export = () => {\n    const { media } = this.props;\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    const title = prompt('Song title', media.title);\n    if (title === null || title.trim().length === 0) {\n      return;\n    }\n    const artist = prompt('Artist', '');\n    if (artist === null || artist.trim().length === 0) {\n      return;\n    }\n    let bpm = prompt('BPM', '100');\n    if (bpm === null || bpm.trim().length === 0) {\n      return;\n    }\n    bpm = parseInt(bpm, 10);\n    const points = instance.points.getPoints().sort((a, b) => a.time - b.time);\n    const gap = (points.length > 0 ? points[0].time : 0) * 1000;\n    const timeToQuarterBeats = bpm * (1 / 60) * (1 / 1000);\n    const textContent = [\n      `#TITLE:${title}`,\n      `#ARTIST:${artist}`,\n      `#BPM:${bpm}`,\n      `#GAP:${Math.floor(gap)}`,\n      ...points.map((point, i) => {\n        if (point.color === '#0000FF') {\n          return null;\n        }\n        const isEndMarker = point.color === '#FF0000';\n        const pos = point.time * 1000;\n        const normalizedPos = Math.floor((pos - gap) * timeToQuarterBeats);\n        if (isEndMarker) {\n          if (i > 0) {\n            return `- ${Math.max(normalizedPos + 1, normalizedPos)}`;\n          } else {\n            return `- ${normalizedPos}`;\n          }\n        }\n        let normalizedLength = 1;\n        if (i + 1 < points.length) {\n          const nextPoint = points[i + 1];\n          const nextPointPos = nextPoint.time * 1000;\n          const normalizedNextPointPos = Math.floor(\n            (nextPointPos - gap) * timeToQuarterBeats\n          );\n          normalizedLength = Math.max(\n            1,\n            normalizedNextPointPos - normalizedPos\n          );\n        }\n        if (\n          point.labelText.substr(0, 1) ===\n          point.labelText.substr(0, 1).toLowerCase()\n        ) {\n          return `: ${normalizedPos} ${normalizedLength} 0  ${point.labelText}`;\n        }\n        return `: ${normalizedPos} ${normalizedLength} 0 ${point.labelText}`;\n      }),\n      'E',\n    ].filter((line) => line !== null);\n    this.download(title, artist, textContent.join('\\n'));\n  };\n\n  handleKeyDown = (e) => {\n    switch (e.code.toLowerCase()) {\n      // Play/Pause on space pressed\n      case 'space':\n        this.togglePaused();\n        break;\n      case 'keyh':\n        this.addLyric();\n        break;\n      case 'keyj':\n        this.addEndOfLyric();\n        break;\n      case 'keyk':\n        this.addEndOfVerse();\n        break;\n      default:\n        console.log(e);\n        break;\n    }\n  };\n\n  addLyric = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    const wasPaused = this.audio.current.paused;\n    instance.player.pause();\n    const lyric = prompt('Please provide a lyric', '');\n    if (lyric === null || lyric.trim().length === 0) {\n      if (!wasPaused) instance.player.play();\n      return;\n    }\n    instance.points.add({\n      time: instance.player.getCurrentTime(),\n      labelText: lyric,\n      editable: true,\n      color: '#666',\n    });\n    if (!wasPaused) instance.player.play();\n  };\n\n  editLyric = (point) => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    const isEndMarker = point.color !== '#666';\n    if (isEndMarker) {\n      if (window.confirm('Do you want to delete this end marker?')) {\n        instance.points.removeById(point.id);\n      }\n      return;\n    }\n    const lyric = prompt(\n      'Update lyric, leave blank to remove',\n      point.labelText\n    );\n    if (lyric === null || lyric.trim().length === 0) {\n      instance.points.removeById(point.id);\n      return;\n    }\n    point.update({\n      labelText: lyric,\n    });\n  };\n\n  addEndOfLyric = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    const wasPaused = this.audio.current.paused;\n    instance.player.pause();\n    instance.points.add({\n      time: instance.player.getCurrentTime(),\n      labelText: '(end of lyric)',\n      editable: true,\n      color: '#0000FF',\n    });\n    if (!wasPaused) instance.player.play();\n  };\n\n  addEndOfVerse = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    const wasPaused = this.audio.current.paused;\n    instance.player.pause();\n    instance.points.add({\n      time: instance.player.getCurrentTime(),\n      labelText: '(end of verse)',\n      editable: true,\n      color: '#FF0000',\n    });\n    if (!wasPaused) instance.player.play();\n  };\n\n  changeVolume = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    const volume =\n      parseFloat(\n        document.querySelector('input[data-action=\"change-volume\"]').value\n      ) || 0;\n    this.audio.current.volume = volume;\n  };\n\n  togglePaused = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    this.setState({ currentLyric: null });\n    const wasPaused = this.audio.current.paused;\n    document.querySelector(\n      'button[data-action=\"toggle-paused\"]'\n    ).textContent = wasPaused ? 'Pause' : 'Play';\n    if (wasPaused) {\n      instance.player.play();\n    } else {\n      instance.player.pause();\n    }\n  };\n\n  zoomIn = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    instance.zoom.zoomIn();\n  };\n\n  zoomOut = () => {\n    const { instance } = this.state;\n    if (instance === null) {\n      return;\n    }\n    instance.zoom.zoomOut();\n  };\n\n  render() {\n    const { media } = this.props;\n    const { instance, currentLyric } = this.state;\n\n    return (\n      <div className=\"uk-card uk-card-default uk-card-body uk-margin-top\">\n        <h3 className=\"uk-card-title\">{media.title}</h3>\n        <h4 className=\"uk-heading-bullet\">\n          <span>{currentLyric}</span>\n        </h4>\n        <div id=\"peaks-container\">\n          <div id=\"zoomview-container\"></div>\n          <div id=\"overview-container\"></div>\n        </div>\n        {instance === null ? (\n          <dl className=\"uk-description-list\">\n            <dt>Processing song data...</dt>\n            <dd>Please wait as \"{media.title}\" is processed...</dd>\n            <br />\n            <div uk-spinner=\"ratio: 1\"></div>\n          </dl>\n        ) : (\n          <>\n            <div className=\"uk-form-stacked\">\n              <div className=\"uk-margin-top\">\n                <label className=\"uk-form-label\">Controls</label>\n                <div className=\"uk-button-group\">\n                  <button\n                    className=\"uk-button uk-button-default uk-button-small\"\n                    data-action=\"toggle-paused\"\n                    title=\"(SPACE)\"\n                  >\n                    Play\n                  </button>\n                  <button\n                    className=\"uk-button uk-button-default uk-button-small\"\n                    data-action=\"zoom-in\"\n                  >\n                    Zoom in\n                  </button>\n                  <button\n                    className=\"uk-button uk-button-default uk-button-small\"\n                    data-action=\"zoom-out\"\n                  >\n                    Zoom out\n                  </button>\n                  <button\n                    className=\"uk-button uk-button-default uk-button-small\"\n                    data-action=\"add-lyric\"\n                    title=\"(H)\"\n                  >\n                    Add a lyrics at current time\n                  </button>\n                  <button\n                    className=\"uk-button uk-button-default uk-button-small\"\n                    data-action=\"end-lyric\"\n                    title=\"(J)\"\n                  >\n                    End lyrics at current time\n                  </button>\n                  <button\n                    className=\"uk-button uk-button-default uk-button-small\"\n                    data-action=\"end-verse\"\n                    title=\"(K)\"\n                  >\n                    End verse at current time\n                  </button>\n                </div>\n              </div>\n              <div className=\"uk-margin-top\">\n                <label className=\"uk-form-label\">Volume</label>\n                <div className=\"uk-form-controls\">\n                  <input\n                    className=\"uk-range\"\n                    data-action=\"change-volume\"\n                    type=\"range\"\n                    defaultValue=\"1\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.01\"\n                  />\n                </div>\n              </div>\n              <div className=\"uk-margin-top\">\n                <button\n                  className=\"uk-button uk-button-primary uk-button-small\"\n                  onClick={this.export}\n                >\n                  Export\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n        <audio ref={this.audio} hidden></audio>\n      </div>\n    );\n  }\n}\n",{"ruleId":"28","severity":1,"message":"29","line":3,"column":1,"nodeType":"30","endLine":13,"endColumn":2},{"ruleId":"28","severity":1,"message":"29","line":3,"column":1,"nodeType":"30","endLine":41,"endColumn":2},{"ruleId":"28","severity":1,"message":"29","line":7,"column":1,"nodeType":"30","endLine":416,"endColumn":2},"import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration"]